a_i=alpha[i]
y_i=train_target[i]
x_i=i
E_i=g(x_i)-y_i
j=sample_without_i(i)
a_j=alpha[j]
y_j=train_target[j]
x_j=j
E_j=g(x_j)-y_j
eta=train_mat[i,i]+train_mat[j,j]-2*train_mat[i,j]
if(eta<=0)
next
#未经剪辑的new_a_j
new_a_j=a_j+y_j*(E_i-E_j)/eta
#剪辑a_j_new
if(y_i!=y_j)
{
L=max(0,a_j-a_i)
H=min(C,C+a_j-a_i)
}
else
{
L=max(0,a_j+a_i-C)
H=min(C,a_i+a_j)
}
a_j_new=update_alpha_2(new_a_j,L,H)
a_i_new=a_i+y_i*y_j*(a_j-a_j_new)
if(abs(a_j_new-a_j)<epsilon)
next
#更新alpha
alpha[i]=a_i_new
alpha[j]=a_j_new
#更新b
b_i=-E_i-y_i*train_mat[i,i]*(a_i_new - a_i) - y_j*train_mat[i,j]*(a_j_new - a_j) + b
b_j=-E_j-y_i*train_mat[i,j]*(a_i_new - a_i) - y_j*train_mat[j,j]*(a_j_new - a_j) + b
if(abs(a_i_new-C/2)<C/2)
b=b_i
else
if(abs(a_j_new-C/2)<C/2)
b=b_j
else
b=(b_i+b_j)/2
change=change+1
}
if(change==0)
k=k+1
else
k=0
}
#计算测试集结果
result=numeric(length = nrow(test_mat))
for (i in 1:nrow(test_mat))
{
f=sum(alpha*train_target*test_mat[i,])+b
if(f>0)
result[i]=1
else
result[i]=-1
}
return(result)
}
SMO_SVC(train_matrix,test_matrix,all_target$train,all_target$test,1e1,1e-2,1)
print(all_target$test)
help(confusionMatrix)
??confusionMatrix
library(caret)
confusionMatrix(SMO_SVC(train_matrix,test_matrix,all_target$train,all_target$test,1e1,1e-2,1),all_target$test)
ConfusionMatrix=function(pred,target)
{
N=length(predict)
TP=FP=FN=TN=0
for(i in 1:N)
if(pred[i]==target[i]==1)
ConfusionMatrix=function(pred,target)
{
N=length(predict)
TP=FP=FN=TN=0
for(i in 1:N)
if(pred[i]==1 &&target[i]==1)
TP=TP+1
if(pred[i]==target[i]==-1)
ConfusionMatrix=function(pred,target)
{
N=length(predict)
TP=FP=FN=TN=0
for(i in 1:N)
if(pred[i]==1 &&target[i]==1)
TP=TP+1
if(pred[i]==-1&&target[i]==-1)
TN=TN+1
if(pred[i]==-target[i]==1)
ConfusionMatrix=function(pred,target)
{
N=length(predict)
TP=FP=FN=TN=0
for(i in 1:N)
if(pred[i]==1 &&target[i]==1)
TP=TP+1
if(pred[i]==-1&&target[i]==-1)
TN=TN+1
if(pred[i]==1&&-target[i]==1)
FP=FP+1
if(pred[i]==-1&&-target[i]==-1)
FN=FN+1
mat=matrix(c(TP,FP,FN,TN),ncol=2)
return(mat)
}
SMO_SVC=function(train_mat,test_mat,train_target,test_target,iter_max,epsilon,C)
{
#初始化
N=nrow(train_mat)
alpha=numeric(length = nrow(train_mat))
b=1
k=0#迭代次数
#定义函数g
g=function(i)
{
return(sum(alpha*train_target*train_mat[i,])+b)
}
sample_without_i=function(i)
{
j=sample(1:N,1)
while(j==i)
j=sample(1:N,1)
return(j)
}
while (k<iter_max)
{
change=0
#取出i，j
for(i in 1:N)
{
a_i=alpha[i]
y_i=train_target[i]
x_i=i
E_i=g(x_i)-y_i
j=sample_without_i(i)
a_j=alpha[j]
y_j=train_target[j]
x_j=j
E_j=g(x_j)-y_j
eta=train_mat[i,i]+train_mat[j,j]-2*train_mat[i,j]
if(eta<=0)
next
#未经剪辑的new_a_j
new_a_j=a_j+y_j*(E_i-E_j)/eta
#剪辑a_j_new
if(y_i!=y_j)
{
L=max(0,a_j-a_i)
H=min(C,C+a_j-a_i)
}
else
{
L=max(0,a_j+a_i-C)
H=min(C,a_i+a_j)
}
a_j_new=update_alpha_2(new_a_j,L,H)
a_i_new=a_i+y_i*y_j*(a_j-a_j_new)
if(abs(a_j_new-a_j)<epsilon)
next
#更新alpha
alpha[i]=a_i_new
alpha[j]=a_j_new
#更新b
b_i=-E_i-y_i*train_mat[i,i]*(a_i_new - a_i) - y_j*train_mat[i,j]*(a_j_new - a_j) + b
b_j=-E_j-y_i*train_mat[i,j]*(a_i_new - a_i) - y_j*train_mat[j,j]*(a_j_new - a_j) + b
if(abs(a_i_new-C/2)<C/2)
b=b_i
else
if(abs(a_j_new-C/2)<C/2)
b=b_j
else
b=(b_i+b_j)/2
change=change+1
}
if(change==0)
k=k+1
else
k=0
}
#计算测试集结果
result=numeric(length = nrow(test_mat))
for (i in 1:nrow(test_mat))
{
f=sum(alpha*train_target*test_mat[i,])+b
if(f>0)
result[i]=1
else
result[i]=-1
}
return(result)
}
pred=SMO_SVC(train_matrix,test_matrix,all_target$train,all_target$test,1e1,1e-2,1)
target=all_target$test
ConfusionMatrix=function(pred,target)
{
N=length(predict)
TP=FP=FN=TN=0
for(i in 1:N)
if(pred[i]==1 &&target[i]==1)
TP=TP+1
if(pred[i]==-1&&target[i]==-1)
TN=TN+1
if(pred[i]==1&&-target[i]==1)
FP=FP+1
if(pred[i]==-1&&-target[i]==-1)
FN=FN+1
mat=matrix(c(TP,FP,FN,TN),ncol=2)
return(mat)
}
ConfusionMatrix(pred,target)
ConfusionMatrix=function(pred,target)
{
N=length(pred)
TP=FP=FN=TN=0
for(i in 1:N)
if(pred[i]==1 &&target[i]==1)
TP=TP+1
if(pred[i]==-1&&target[i]==-1)
TN=TN+1
if(pred[i]==1&&-target[i]==1)
FP=FP+1
if(pred[i]==-1&&-target[i]==-1)
FN=FN+1
mat=matrix(c(TP,FP,FN,TN),ncol=2)
return(mat)
}
ConfusionMatrix(pred,target)
SMO_SVC=function(train_mat,test_mat,train_target,test_target,iter_max,epsilon,C)
{
#初始化
N=nrow(train_mat)
alpha=numeric(length = nrow(train_mat))
b=1
k=0#迭代次数
#定义函数g
g=function(i)
{
return(sum(alpha*train_target*train_mat[i,])+b)
}
sample_without_i=function(i)
{
j=sample(1:N,1)
while(j==i)
j=sample(1:N,1)
return(j)
}
while (k<iter_max)
{
change=0
#取出i，j
for(i in 1:N)
{
a_i=alpha[i]
y_i=train_target[i]
x_i=i
E_i=g(x_i)-y_i
j=sample_without_i(i)
a_j=alpha[j]
y_j=train_target[j]
x_j=j
E_j=g(x_j)-y_j
eta=train_mat[i,i]+train_mat[j,j]-2*train_mat[i,j]
if(eta<=0)
next
#未经剪辑的new_a_j
new_a_j=a_j+y_j*(E_i-E_j)/eta
#剪辑a_j_new
if(y_i!=y_j)
{
L=max(0,a_j-a_i)
H=min(C,C+a_j-a_i)
}
else
{
L=max(0,a_j+a_i-C)
H=min(C,a_i+a_j)
}
a_j_new=update_alpha_2(new_a_j,L,H)
a_i_new=a_i+y_i*y_j*(a_j-a_j_new)
if(abs(a_j_new-a_j)<epsilon)
next
#更新alpha
alpha[i]=a_i_new
alpha[j]=a_j_new
#更新b
b_i=-E_i-y_i*train_mat[i,i]*(a_i_new - a_i) - y_j*train_mat[i,j]*(a_j_new - a_j) + b
b_j=-E_j-y_i*train_mat[i,j]*(a_i_new - a_i) - y_j*train_mat[j,j]*(a_j_new - a_j) + b
if(abs(a_i_new-C/2)<C/2)
b=b_i
else
if(abs(a_j_new-C/2)<C/2)
b=b_j
else
b=(b_i+b_j)/2
change=change+1
}
if(change==0)
k=k+1
else
k=0
}
#计算测试集结果
result=numeric(length = nrow(test_mat))
for (i in 1:nrow(test_mat))
{
f=sum(alpha*train_target*test_mat[i,])+b
if(f>0)
result[i]=1
else
result[i]=-1
}
return(result)
}
pred=SMO_SVC(train_matrix,test_matrix,all_target$train,all_target$test,1e1,1e-2,1)
target=all_target$test
print(list(pred,target))
ConfusionMatrix=function(pred,target)
{
N=length(pred)
TP=FP=FN=TN=0
for(i in 1:N)
if(pred[i]==1 &&target[i]==1)
TP=TP+1
if(pred[i]==-1&&target[i]==-1)
TN=TN+1
if(pred[i]==1&&-target[i]==1)
FP=FP+1
if(pred[i]==-1&&-target[i]==-1)
FN=FN+1
mat=matrix(c(TP,FP,FN,TN),ncol=2)
return(mat)
}
ConfusionMatrix(pred,target)
ConfusionMatrix=function(pred,target)
{
N=length(pred)
TP=FP=FN=TN=0
for(i in 1:N)
if(pred[i]==1 &&target[i]==1)
TP=TP+1
if(pred[i]==-1&&target[i]==-1)
TN=TN+1
if(pred[i]==1&&-target[i]==1)
FP=FP+1
if(pred[i]==-1&&-target[i]==-1)
FN=FN+1
mat=matrix(c(TP,FP,FN,TN),ncol=2)
return(N)
}
ConfusionMatrix(pred,target)
ConfusionMatrix=function(pred,target)
{
N=length(pred)
TP=FP=FN=TN=0
for(i in 1:N)
if(pred[i]==1 &&target[i]==1)
TP=TP+1
if(pred[i]==-1&&target[i]==-1)
TN=TN+1
if(pred[i]==1&&-target[i]==1)
FP=FP+1
if(pred[i]==-1&&-target[i]==-1)
FN=FN+1
mat=matrix(c(TP,FP,FN,TN),ncol=2)
return(mat)
}
ConfusionMatrix(pred,target)
ConfusionMatrix=function(pred,target)
{
N=length(pred)
TP=FP=FN=TN=0
for(i in 1:N)
if(pred[i]==1 &&target[i]==1)
TP=TP+1
if(pred[i]==-1&&target[i]==-1)
TN=TN+1
if(pred[i]==1&&-target[i]==1)
FP=FP+1
if(pred[i]==-1&&-target[i]==-1)
FN=FN+1
mat=matrix(c(TP,FP,FN,TN),ncol=2)
return(TP)
}
ConfusionMatrix(pred,target)
ConfusionMatrix=function(pred,target)
{
N=length(pred)
TP=FP=FN=TN=0
for(i in 1:N)
if(pred[i]==1 &&target[i]==1)
TP=TP+1
if(pred[i]==-1&&target[i]==-1)
TN=TN+1
if(pred[i]==1&&-target[i]==1)
FP=FP+1
if(pred[i]==-1&&-target[i]==-1)
FN=FN+1
mat=matrix(c(TP,FP,FN,TN),ncol=2)
return(TN)
}
ConfusionMatrix(pred,target)
ConfusionMatrix=function(pred,target)
{
N=length(pred)
TP=FP=FN=TN=0
for(i in 1:N)
{
if(pred[i]==1 &&target[i]==1)
TP=TP+1
if(pred[i]==-1&&target[i]==-1)
TN=TN+1
if(pred[i]==1&&target[i]==-1)
FP=FP+1
if(pred[i]==-1&&target[i]==1)
FN=FN+1
}
mat=matrix(c(TP,FP,FN,TN),ncol=2)
return(mat)
}
ConfusionMatrix(pred,target)
devtools::document()
rm(list = c("modify_label"))
devtools::document()
devtools::check()
devtools::document()
rm(list = c("update_alpha_2"))\
rm(list = c("update_alpha_2"))
devtools::document()
devtools::check()
devtools::document()
rm(list = c("SMO_SVC"))
devtools::document()
devtools::check()
devtools::document()
rm(list = c("ConfusionMatrix"))
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('D:/StatComp21092/StatComp21092_0.1.0.tar.gz',repos=NULL)
devtools::install_github("mmfd99/StatComp21092",build_vignettes = TRUE,force = T)
install.packages("glue")
install.packages("glue")
install.packages("glue",dependencies = TRUE)
devtools::install_github("mmfd99/StatComp21092",force = TRUE)
StatComp21092::yeast_test
StatComp21092::timesTwo(1)
library(StatComp21092)
data("yeast_tra")
data("yeast_test")
P=1000
mat=K_SMOTE(yeast_tra,yeast_test,P,3)
devtools::install_github("mmfd99/StatComp21092",force=TRUE)
devtools::install_github("mmfd99/StatComp21092",force = TRUE)
library(StatComp21092)
StatComp21092::timesTwo(1)
devtools::install_github("mmfd99/StatComp21092",force = TRUE)
devtools::install_github("mmfd99/StatComp21092",force = TRUE)
devtools::install_github("mmfd99/StatComp21092",force = TRUE)
library(StatComp21092)
StatComp21092::timesTwo(1)
StatComp21092::timesTwo(10)
devtools::install_github("mmfd99/StatComp21092",force = TRUE)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes = FALSE)
devtools::install_github("mmfd99/StatComp21092",force=TRUE)
devtools::install_github("mmfd99/StatComp21092",force=TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::install_github("mmfd99/StatComp21092",build_vignettes = TRUE,force = T)
StatComp21092
devtools::install_github("mmfd99/StatComp21092",build_vignettes = TRUE,force = T)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build()
devtools::build(vignettes = FALSE)
